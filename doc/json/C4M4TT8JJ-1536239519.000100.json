[
    {
        "ts": "1536200927.000100",
        "text": "いっその事、型変数の量で選ばれる 0個が一番強くて大きくなると選ばれにくくなるみたいなのがあればいいんでしょうね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536201124.000100",
        "text": "型変数の量っていうのは少々間違いで、正確には抽象度の少さ で選ぶ その基準の一つとして上げられるのが型変数の種類 っていう話です",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536209910.000100",
        "text": "<https://github.com/serokell/universum#gotchas->\n&gt; You can't call some Foldable methods over Maybe and some other types. Foldable generalization is useful but potentially error-prone. Instead we created our own fully compatible with Foldable Container type class but that restricts the usage of functions like length over Maybe, Either, Identity and tuples.\n:thinking_face: :thinking_face: :thinking_face: :thinking_face: :thinking_face:",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536210052.000100",
        "text": "MaybeにmapM_できないの、反知性的と言いたくなるデザインだ…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536210268.000100",
        "text": "<https://twitter.com/igrep/status/1022732186510811137> こういう話ですよね。\nエラーは絶対無視したくないっていうGo言語からきた発想だと、気持ちはわからなくもないです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536210404.000100",
        "text": "でもリスクをわかった上でMaybeにmapM_する自由ぐらい与えてやれよって気持ちもわかります。 :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536210801.000100",
        "text": "何か制約を課す場合、それは論理に沿ったものあるべきと考えていて、このライブラリのように人間本位の制限を付けるのは好きにはなれないです。値を捨てたくないなら線形型のようにもっと筋の通った概念があるわけですし",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536217616.000100",
        "text": "どのインスタンスが選ばれるかはプログラムの意味を変えうる重要な問題なので、その基準が複雑になるほどプログラムの論証は難しくなります。書き換え規則(RULESプラグマ)のような補助的な機能でさえその問題は深刻なので、Haskellの根幹をなす型クラスは、できる限り簡潔にするのがよい設計だと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536219346.000100",
        "text": "なるほどね。そういう抽象化が進めばボイラープレートが減るんじゃないかなと思ったんですが、実装が複雑化するのは否めないですね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536239519.000100",
        "text": "今見てみたら、gitlabの表示で、レンダリングが崩れてるようですよ。",
        "user": "U55V441FS",
        "type": "message"
    }
]