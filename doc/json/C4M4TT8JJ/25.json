[
    {
        "ts": "1539048603.000100",
        "text": ":sweat_smile: HaskellDayのハッシュタグが被ってしまったか。。。まぁ、Haskellってもともと人の名前だし、しょうがないか。。。\n<https://twitter.com/USIndianAffairs/status/1041702224534138881>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539048814.000100",
        "text": "どうやらプログラミング言語の方の名前の由来となったHaskell Curryさんとも関係がない、別のHaskellさんみたい。\n<https://en.wikipedia.org/wiki/Haskell_Indian_Nations_University>\n&gt; The school was named after Dudley C. Haskell, a member of the U.S. House of Representatives from the 2nd district of Kansas.",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539054975.000100",
        "text": "ああああああ！知ってる！最初大学ぐるみでHaskellを推進しているのかと勘違いしてました。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1539080141.000100",
        "text": "「Haskell入門ハンズオン」イベントのハッシュタグが `#Haskell` なのも他の Haskellさんと被りがち。",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1539139275.000100",
        "text": "自作ライブラリをhaddockでドキュメント作ってみてみたらテンション上がりました",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539143075.000100",
        "text": "あとちゃんとドキュメント書くと文明的になりますね",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539162809.000200",
        "text": "<@UDC1LV887> has joined the channel",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539179888.000100",
        "text": "Haskell初心者なので、見当違いのことを言っているかもしれませんが、質問させてください :bow:\n\n**※全てGHCi v8.0.2で処理を行っています**\n\n`fmap` と `ap` を用いることで、任意個の引数を持つ関数と任意個のFunctorに対して、以下のような計算が行えるかと思います：\n\n```\n(*) &lt;$&gt; Just 1 &lt;*&gt; Just 2 =&gt; Just 2\n```\n\nここで、TupleもFunctorのインスタンスであることを知り、以下のような計算を考えてみました：\n\n```\n(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) =&gt; (1, 2) となることを期待\n```\n\nしかしながら、上記の式はShowのインスタンスとして解決できないという趣旨のエラーにより、期待する結果が得られませんでした。\n\nそこで、ステップごとに型を確かめてみたところ：\n\n```\n:t ((*) &lt;$&gt;)\n((*) &lt;$&gt;) :: (Num a, Functor f) =&gt; f a -&gt; f (a -&gt; a)\n\n:t ((*) &lt;$&gt; (1,1))\n((*) &lt;$&gt; (1,1)) :: (Num t, Num a) =&gt; (t, a -&gt; a)\n\n:t ((*) &lt;$&gt; (1,1) &lt;*&gt;)\n((*) &lt;$&gt; (1,1) &lt;*&gt;) :: (Num t, Num b, Monoid t) =&gt; (t, b) -&gt; (t, b)\n\n:t ((*) &lt;$&gt; (1,1) &lt;*&gt; (2,2))\n((*) &lt;$&gt; (1,1) &lt;*&gt; (2,2)) :: (Num t, Num b, Monoid t) =&gt; (t, b)\n```\n\nこれより、 `ap` を適用した時点で第一要素にMonoidの型制約が入っており、これがエラーの原因かと考えています。\n\nなぜ `ap` を適用した時点でMonoidの型制約が入るのでしょうか？これは、TupleがApplicativeのインスタンスとして何か特殊化されているためなのでしょうか？\nまたもし上記が正しい場合、特殊化を回避すれば期待する計算結果は得られるのでしょうか？\n\n長文となりましたが、ご教授いただければ幸いです :haskell:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539181912.000100",
        "text": "tにMonoidが入るのは、そのApplicativeインスタンスの制約にMonoidが入るからですね！\n`Monoid t =&gt; Applicative ((,) t)`\n<https://www.stackage.org/haddock/lts-12.12/base-4.11.1.0/Prelude.html#t:Applicative>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1539183884.000100",
        "text": "ありがとうございます！\n\nこちら、最初は変な挙動に思えていましたが、第一要素を無視するのであればそもそもで文脈としてのFunctor(Maybeの様な)を使えば良いのかなと\n第一要素を活かしてApplicativeとしての連鎖を許すなら、第一要素はMonoidとして連結していく方が自然かつ有用ということなんですかね\n\nこのあたり、何か数学的・圏論的な背景もあったりしたら別途知ってみたいです :haskell:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539191111.000100",
        "text": "端的に言うと、ソース読めやおらぁ？！（大汗）　ってことになるわけですが、 `(u, f) &lt;*&gt; (v, x) = (u &lt;&gt; v, f x)` というApplicativeインスタンスの宣言（一部抜粋）がなされてたので、タプルの左側の型の  `&lt;&gt;`  の仕方わかんないんだけど（怒り）　と言われてるのだと思います。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1539196512.000100",
        "text": "```(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) =&gt; (1, 2) となることを期待```\nとのことですがこの `(1, 2)` はどういう計算結果ですか。\n2 は 1*2 の結果かなと思うのですが 1 の方は第一要素の最初に出てきた 1？",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1539208918.000100",
        "text": "少し補足なのですが，\n&gt; 第一要素を活かしてApplicativeとしての連鎖を許すなら、第一要素はMonoidとして連結していく方が自然かつ有用ということなんですかね\nというのは正しいのですが，\n```\n(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) -- =&gt; (1, 2)\n```\nという動作で実装されていないのはそもそもこういう動作をApplicativeにすることが困難だからです．\n理由は単純でApplicativeクラスのpureを実装できないからです．つまり，以下のような式において?の要素を埋められないからです．\n```\npure 2 :: (Int, Int) -- =&gt; (?, 2)\n```\nデフォルト値として0を入れればいいのではないかという見方もできますが，デフォルト値というのは行いたい演算によって変わってくるので，Int型(や他の全ての型)でデフォルト値を一意に決めることは通常できません．\n\nMonoidのインスタンスであればデフォルト値が決まりますし，apのための演算も提供できるというのがMonoidインスタンスで実装されている主な背景です(これは圏論でのApplicative functorの捉え方とも関連性はあるのですが，あまり安易な解説をしてる文献は知らないですね… 興味があれば， <https://bartoszmilewski.com/2017/02/06/applicative-functors/> とかを読んでみるといいかもしれません)\n\nところで，全ての型に強制的にデフォルト値を足して，演算として最初の要素をただ単に返すMonoidインスタンスを持つデータ型はFirst(<https://www.stackage.org/haddock/lts-12.12/base-4.11.1.0/Data-Monoid.html#t:First>)という名前で提供されていて，これを使えばおそらく最初に期待した動作は得られます．\n```\n(*) &lt;$&gt; (First (Just 1), 1) &lt;*&gt; (First (Just 2), 2) == (First (Just 1), 1 * 2)\n```",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1539237399.000100",
        "text": "<@U57D08Z9U> `pure` が実装できないというのはすごく納得です！ありがとうございます :slightly_smiling_face:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539325107.000100",
        "text": "<http://www.tsurucapital.com/en/> Tsuru Capitalはインターン(3ヶ月)の募集を再開しています。選考は難易度低めのコードサンプル(<http://www.tsurucapital.com/en/code-sample.html>)が主体で、正しい結果を出すのはもちろんですがコードの品質、速度なども評価されます。腕に自信のある方はぜひ",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1539354026.000100",
        "text": "「腕に自信のある方は」は余計だったかもしれない。比較的簡単な問題の割に応募数も正答率も低いので狙い目ですよ",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1539380019.000200",
        "text": "<@UDD6T5344> has joined the channel",
        "user": "UDD6T5344",
        "type": "message"
    }
]