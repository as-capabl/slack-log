[
    {
        "ts": "1540520498.000200",
        "text": "<@UDP2YN4P7> has joined the channel",
        "user": "UDP2YN4P7",
        "type": "message"
    },
    {
        "ts": "1540737524.001800",
        "text": "hfmtがTemplateHaskellのトップレベルな関数呼び出しに対応してなさそうで泣いてる\n```\nfoo bar ''Baz\n```",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1540738682.002300",
        "text": "対応してた:two_hearts:",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1540779064.003100",
        "text": "ちまたで話題の <http://pixe.la|pixe.la> のクライアントを土曜日から書き始めた",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1540779660.003600",
        "text": "Pixela使って何か作るんですか？",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1540780101.005100",
        "text": "`$` の感覚でいると `infixl 4 &lt;$&gt;` で引っかかってしまう……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1540785450.005600",
        "text": "とりあえずデジカメの写真がいっぱいあるのでそれから日付情報取ってこれば撮影枚数で草生やせるなーと考えてます",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1540785476.005800",
        "text": "なるほどそういう使いみちもあるんですね :memo:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1540821378.008200",
        "text": "hfmt……っていうか多分その内部のstylish-haskell？\nパースエラー起こすと変なフォーマットがかかったコードを落としていく気がするので、なかなかつらくなってきた。\n設定の問題？",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1540880676.008500",
        "text": "GHCがPhabricatorからGitLabに移行するかもしれない話\n<https://mail.haskell.org/pipermail/ghc-devs/2018-October/016425.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540881060.008900",
        "text": "<https://ghc.haskell.org/trac/ghc/wiki/WhyNotPhabricator>\n\n私もPhabricatorが嫌いなので実現したら嬉しい",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1540901892.009400",
        "text": "<https://qiita.com/advent-calendar/2018/haskell>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1540901941.010300",
        "text": "登録 :done: \n\nHaskell-jp Blog への寄稿も大歓迎です！（寄稿方法はこちら）\n……って書いちゃってもいいですかね :eyes:",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1540901958.010600",
        "text": "もうできたんだw",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540902012.010900",
        "text": "もちろんOKだ！\n<https://github.com/haskell-jp/blog/blob/master/README.md> のご案内も忘れずに！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540904015.011800",
        "text": "もしかしてstackage-ltsのお知らせ機能停止してます？？",
        "user": "U561MADLH",
        "type": "message"
    },
    {
        "ts": "1540904132.013000",
        "text": "ほんとだ2日前に 12.16 出てるね\n<https://www.stackage.org>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540904246.014500",
        "text": "情報源がRSSだから、先方にお願いしないといけないかな？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540904256.014800",
        "text": "これってどうやってるんでしたっけ？\n誰かのプログラムだっけ？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540904317.015300",
        "text": "いや、 <#C5UPKRGRE|questions-feed> とかと同じように、SlackのRSS配信機能を使っています。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540904329.015500",
        "text": "なるほど",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540904472.016300",
        "text": "なのでどこかで聞いてみないとな。。。止まっていると言うより、1日に連続して出たことによってなんかバグったんだろうか。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540904859.017500",
        "text": "元のfeedが入ったXMLファイルがこれらしい <https://www.stackage.org/feed/lts>\nページ内検索した限り普通に12.16もヒットしますね。。。\nどちらかというとSlack側の問題なんじゃないかという気がしてきました。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540907264.019300",
        "text": "<https://twitter.com/slackhq/status/506655984979546113> で言ってるように、５分間隔でRSSの更新を確認して、さらに、RSSのフィードとしての要件として、各レコードは正しい日付を持っていることとなっていますので、同じ日付の更新だとRSSの更新とは見られないのかもしれませんね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1540966291.022100",
        "text": "<http://fumieval.hatenablog.com/entry/2018/10/31/150056> 最近の議論を受け、取り急ぎ「束縛」という言葉の使い方についての記事を執筆しました。なるべく正確を期したつもりですが、もし不適当な記述があればご教示ください",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1540968000.022700",
        "text": "ちなみに、 `x = 42` のように Haskell で `=` を使った場合は何て読むのが正しいのでしょう？定義とかですかね？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540968205.023000",
        "text": "(関数|変数)定義が一番無難だと思います。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1540968235.023300",
        "text": "なるほど :+1: ",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1540999831.023700",
        "text": "読ませていただきました．うまく理解できないところがありましたのでコメントします．\n\n&gt;これは**あくまで変数とそれを導入する抽象の関係**であり、**変数と実体の関係ではない**ことだ。\n\n「自由な」とか「束縛された」が修飾するのは構文上の**位置**なので，λ変数とそれを導入する抽象の関係を「束縛」といえることは確かだと思います．しかし，λ変数は後続の構文中での出現によって，どの位置がどの抽象で束縛されているか示すため方法の1つにすぎません．どの位置がどの抽象で束縛されているか示せれば，変数が存在しなくてもよいわけです．そうだとすると**変数と実体の関係ではない**というためにはさらに説明が必要な気がします．\n\n&gt;Haskellは、x = 42のような定義を与えることによって、変数で値を参照できる。だからといって「Haskellでは変数を値にバインドする」と言い切ってしまうことには大きな問題がある。理由は簡単で、変数に対して値以外もバインドできるからだ。例えばy = x + 1という宣言を考えてみよう。この宣言はyをバインドするが、その対象はx + 1という計算であり、式を評価した結果の値ではない。\n\n&gt;定義がインライン化(その名前が使われている場所に展開)されず、メモリ上に領域を確保すべきものと処理系が判断した場合、初めて値に関する議論が始まる――これが「代入」である。代入は、オブジェクトをヒープ(実行時に確保されるメモリ領域)上の場所にセットする。ここで言うオブジェクトは大きく分けて2種類ある。\n\n私には，式``42``と式``6 * 7``とでは，一方は値で一方は計算であるという区別をする理由がよく判らないです．どちらの式も，「よんじゅうに」という同じ値を表わ(denote)すと考えたとき，どのような不都合がありますでしょうか？\n一般にはHaskellで書かれたプログラムの意味は，数学的な関数モデルで考えるのが判りやすいと思われています．関数モデルは**構文**と**意味**で二元的に構成されている体系だとすると，**式**と**値**がその2つに相当すると考えてよいでしょう．そこに3つめの**計算**という元素を入れて，さらにメモリ，関数モデルではないモデルで説明する理由が示されていると判りやすいのかもしれません．\n\n&gt;この混乱は言語仕様ですらやらかしてしまっている。Haskell 2010 Language Reportの3.17.2 Informal Semantics of Pattern Matchingを見ると、\"Binding does not imply evaluation\"と注記しているにもかかわらず、本来オブジェクトに対するものであるパターンマッチを値に対するものと宣言してしまい、変数を値に束縛するという旨の表現を二箇所で使ってしまっている。学習者は言語仕様を読むだけでなく、case undefined + undefined of _ -&gt; 42のような式を手元で評価し、実際の意味論を把握することを推奨する。\n\n私としては「パターンマッチは値に対するものではなく，オブジェクトに対するものである」ことがうまく理解できません．「パターンマッチは値に対するもの」では，どのような不都合があるのでしょうか？\nまた``case undefined + undefined of _ -&gt; 42``はなにを説明する例なのでしょうか．\n\n&gt;以下のような主張はすべて**誤り**である．\n\n定義が明示されていないので，すこし判りにく気がします．「定義によるんじゃないの」というひねくれものが出そう(相手にしなければいいだけかもしれないですが）．\n\nbindがどのような意味で使われているかに注意を払うべき，という主張は，肝に銘じます．",
        "user": "U4KU9ABL0",
        "type": "message"
    }
]